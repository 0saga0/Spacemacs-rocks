* Spacemacs Rocks Episode 2 (Day Three)
  
** Split your configs into multiple files
1. use Git to management your init file

2. help window is anoyying.. 
#+BEGIN_SRC emacs-lisp
;; add popwin mode
;; why this line is needed
(require 'popwin) (require 'init-packages)
   ;;when require, wh(setq company-minimum-prefix-length 1)en not require
(popwin-mode t)
#+END_SRC

3. load-file, load-path and load
4. features, provide and require, autoload
5. naming conventions
zilongshanren/xxxx
minor mode or major mode.
niubi-mode
niubi-xxx 

   all of the names should have a prefix, such that the naming conflicts could be minimal.  
6. define your abbrevs
#+BEGIN_SRC emacs-lisp
    (abbrev-mode t)

  (define-abbrev-table 'global-abbrev-table '(
                                              ;; signature
                                              ("8zl" "zilongshanren")
                                              ;; emacs regex
                                              
                                              ))
#+END_SRC
7. how to organize your configs
- init-packages.el
- init-ui.el
- init-better-defaults.el
- init-keybindings.el
- custom.el
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

8. use `counsel-git` to find file in git managed project.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c p f") 'counsel-git)
#+END_SRC


** Major mode and minor mode in details
1. conventions
text-mode/special-mode/prog-mode
naming:  xxx-mode,  xxx-mode-key-map  xxx-mode-hook

2. mode key map and mode hook

3. let's take a look at a pacakge in elpa (company)
   
** Better defaults
1. C-a to smart move to the beginning of the line.
#+BEGIN_SRC emacs-lisp
  ;;http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))
     
  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+END_SRC
2. Indent-region or buffer
#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    "Indent the currently visited buffer."
    (interactive)
    (indent-region (point-min) (point-max)))

  (defun indent-region-or-buffer ()
    "Indent a region if selected, otherwise the whole buffer."
    (interactive)
    (save-excursion
      (if (region-active-p)
          (progn
            (indent-region (region-beginning) (region-end))
            (message "Indented selected region."))
        (progn
          (indent-buffer)
          (message "Indented buffer.")))))

  (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)


#+END_SRC
3. another way to complete things in Emacs.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-/") 'hippie-expand)
;; hippie expand is dabbrev expand on steroids
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))
#+END_SRC
4. disable audio bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

5. auto revert file when they are changed outside the editor
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

6. disable wired copy & paste issue
#+BEGIN_SRC emacs-lisp 
(setq mouse-yank-at-point t)
#+END_SRC

** Dired mode and file related operations
1. copy, delete and rename file
Copy/Delete/Rname files and folders

#+BEGIN_SRC emacs-lisp
  ;; dired - reuse current buffer by pressing 'a'
  (put 'dired-find-alternate-file 'disabled nil)

  ;; always delete and copy recursively
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)

  ;; if there is a dired buffer displayed in the next window, use its
  ;; current subdir, instead of the current subdir of this dired buffer
  (setq dired-dwim-target t)

  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)

;; less typing when Emacs ask you yes or no
  (fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

2. add new file and folder

+ for adding new folders,
C-x C-f to create a new file.

3. open dired of current buffer
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
#+END_SRC
after applying this setting, we could press `C-x C-j` to jump to the dired buffer of current file.

4. open finder on Mac. (optional)
Packages:

reveal-in-osx-finder for openning the finder of the current file.



** Bonus Time. Use Org-mode literate programming to organize your Emacs configurations. 
#+BEGIN_SRC emacs-lisp
(require 'org-install)
(require 'ob-tangle)
(org-babel-load-file (expand-file-name "zilongshanren.org" user-emacs-directory))
#+END_SRC



** Exercise
1. define C-x C-e in Js2-mode to eval js expression after node-repl mode is actived.
2. Only turn on Linum-mode when doing programming (tips: use prog-mode-hook)
